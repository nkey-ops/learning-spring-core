<?xml version="1.0" encoding="UTF-8"?>
<beans
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config />

    <!-- services -->
    <bean name="petStoreService" class="main.PetStoreService">
        <constructor-arg ref="petControllService" index="0" />
        <constructor-arg type="java.lang.String" value="new name" index="1" />
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <bean name="petStoreWithInnerBeanPetControll" class="main.PetStoreService">
        <constructor-arg index="0">
            <bean class="main.PetControllService"
                factory-method="createDefault"
            />
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="new name" index="1" />
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <bean name="petControllerWithCollections" class="main.PetControllService">
        <constructor-arg>
            <list>
                <value>name1</value>
                <value>name2</value>
            </list>
        </constructor-arg>
        <constructor-arg>
            <map>
                <entry key="key-with-text" value="text"></entry>
                <entry key="key-with-obj" value-ref="petControllService"></entry>
            </map>
        </constructor-arg>
    </bean>

    <bean name="test" class="main.PetControllService">
        <constructor-arg value="name" />
        <property name="namesAndObjects">
            <map>
                <entry key="key-with-text" value="text"></entry>
                <entry key="key-with-obj" value-ref="petControllService"></entry>
            </map>
        </property>
    </bean>

    <bean name="petControlerWithCollectionChild" parent="test">
        <property name="namesAndObjects">
            <map merge="true">
                <entry key="child-key-with-text" value="text"></entry>
                <entry key="key-with-text" value="new text"></entry>
            </map>
        </property>
    </bean>

    <bean id="petControllService" class="main.PetControllService" factory-method="create">
        <constructor-arg type="java.lang.String" value="pet Controll Name"></constructor-arg>
    </bean>

    <bean id="petControllServiceCopy"
        factory-bean="petControllService"
        factory-method="createCopy">
    </bean>

    <bean id="nestPetControll" class="main.PetControllService$NestPetControll">
    </bean>


    <bean id="petControllServiceDepended" class="main.PetControllService"
        factory-method="createWithEcho"
        depends-on="petControllServiceNotDepended">
        <constructor-arg type="java.lang.String" value="Pet Controll Service Depend On Is Loaded" />
    </bean>

    <bean id="petControllServiceNotDepended" class="main.PetControllService"
        factory-method="createWithEcho">
        <constructor-arg type="java.lang.String"
            value="Pet Controll Service NOT depend on is Loaded" />
    </bean>

    <alias name="petStoreService" alias="aliasForPetStore" />

    <bean id="lazyPetControll" class="main.PetControllService" lazy-init="true"
        factory-method="createWithEcho">
        <constructor-arg value="Its a lazy Pet Controll"></constructor-arg>
    </bean>

    <bean id="getAllBeansViaList" class="main.GetAllBeansNow"
        autowire="constructor"></bean>

    <bean id="needForNewBean" class="main.NeedForNewPrototypeBean">
        <constructor-arg ref="prototypeBean" />
        <lookup-method name="getPrototypeBeanNew" bean="prototypeBean"></lookup-method>
    </bean>

    <bean id="prototypeBean" class="main.NeedForNewPrototypeBean.PrototypeBean"
        scope="prototype">
        <aop:scoped-proxy />
    </bean>

    <bean class="main.PostInitAndPreDestroy.InitializingAndDisposableBean " />
    <bean class="main.PostInitAndPreDestroy.PostConstructAndPreDestroyBean " />
    <bean class="main.PostInitAndPreDestroy.InitAndDestroyBean "
        init-method="init"
        destroy-method="destroy" />

    <bean class="main.LifecycledBeans.LifecycleProcessedBean" lazy-init="true" />
    <bean class="main.LifecycledBeans.SmartcycleBean"
        init-method="init"
        destroy-method="destroy"
        lazy-init="true" />

    <bean id="lifecycleProcessor"
        class="org.springframework.context.support.DefaultLifecycleProcessor">
        <!-- timeout value in milliseconds -->
        <property name="timeoutPerShutdownPhase" value="10000" />
    </bean>

    <bean id="parent" abstract="true" class="main.Inheritance.Inheritor">
        <property name="name" value="parent name"></property>
    </bean>

    <bean id="inheritor" parent="parent"> </bean>

    <!-- <bean class="main.PostProcessingBeans" /> -->

    <bean id="requiredArguments" class="main.RequiredArguments">
        <constructor-arg value="${required-arguments.arg-1}"></constructor-arg>
    </bean>

    <!-- <bean id="qualifiers" class="main.Qualifiers" autowire="byType"> -->
    <!-- </bean> -->
    <!-- <bean class="main.Qualifiers.BeanA" -->
    <!--     factory-bean="qualifiers" -->
    <!--     factory-method="beanA"> -->
    <!--     <qualifier value="beanA"></qualifier> -->
    <!-- </bean> -->
    <!-- <bean class="main.Qualifiers.BeanA" -->
    <!--     factory-bean="qualifiers" -->
    <!--     factory-method="beanB"> -->
    <!--     <qualifier value="beanB"></qualifier> -->
    <!-- </bean> -->
    <!---->

    <bean class="main.xmlconfig.ExtendingQualifiers" autowire="byType"></bean>

    <bean class="main.xmlconfig.ExtendingQualifiers"
        factory-method="bean1">
        <qualifier
            type="main.xmlconfig.MovieQ">
            <attribute key="genre" value="horror" />
            <attribute key="format" value="VHS" />
        </qualifier>
    </bean>

    <bean class="main.xmlconfig.ExtendingQualifiers"
        factory-method="bean2"
        primary="true"
    >
        <meta key="genre" value="horror" />
        <meta key="format" value="VHS" />
    </bean>

    <context:property-placeholder location="application.properties" />
</beans>
